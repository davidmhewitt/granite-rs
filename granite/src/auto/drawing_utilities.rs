// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{DrawingColor};
use glib::{translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "GraniteDrawingUtilities")]
    pub struct DrawingUtilities(Object<ffi::GraniteDrawingUtilities, ffi::GraniteDrawingUtilitiesClass>);

    match fn {
        type_ => || ffi::granite_drawing_utilities_get_type(),
    }
}

impl DrawingUtilities {
        pub const NONE: Option<&'static DrawingUtilities> = None;
    

    #[doc(alias = "granite_drawing_utilities_new")]
    pub fn new() -> DrawingUtilities {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::granite_drawing_utilities_new())
        }
    }

    #[doc(alias = "granite_drawing_utilities_average_color")]
    pub fn average_color(source: &gdk_pixbuf::Pixbuf) -> Option<DrawingColor> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::granite_drawing_utilities_average_color(source.to_glib_none().0))
        }
    }
}

impl Default for DrawingUtilities {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

impl fmt::Display for DrawingUtilities {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DrawingUtilities")
    }
}
