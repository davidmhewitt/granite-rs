// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, SettingsColorScheme};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GraniteStyleManager")]
    pub struct StyleManager(Object<ffi::GraniteStyleManager, ffi::GraniteStyleManagerClass>);

    match fn {
        type_ => || ffi::granite_style_manager_get_type(),
    }
}

impl StyleManager {
    pub const NONE: Option<&'static StyleManager> = None;

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`StyleManager`] objects.
    ///
    /// This method returns an instance of [`StyleManagerBuilder`](crate::builders::StyleManagerBuilder) which can be used to create [`StyleManager`] objects.
    pub fn builder() -> StyleManagerBuilder {
        StyleManagerBuilder::new()
    }

    #[doc(alias = "granite_style_manager_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]
    pub fn default() -> StyleManager {
        assert_initialized_main_thread!();
        unsafe { from_glib_none(ffi::granite_style_manager_get_default()) }
    }

    #[doc(alias = "granite_style_manager_get_for_display")]
    #[doc(alias = "get_for_display")]
    pub fn for_display(display: &gdk::Display) -> StyleManager {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::granite_style_manager_get_for_display(
                display.to_glib_none().0,
            ))
        }
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`StyleManager`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct StyleManagerBuilder {
    builder: glib::object::ObjectBuilder<'static, StyleManager>,
}

impl StyleManagerBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn color_scheme(self, color_scheme: SettingsColorScheme) -> Self {
        Self {
            builder: self.builder.property("color-scheme", color_scheme),
        }
    }

    pub fn display(self, display: &gdk::Display) -> Self {
        Self {
            builder: self.builder.property("display", display.clone()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`StyleManager`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> StyleManager {
        assert_initialized_main_thread!();
        self.builder.build()
    }
}

pub trait StyleManagerExt: IsA<StyleManager> + 'static {
    #[doc(alias = "granite_style_manager_get_color_scheme")]
    #[doc(alias = "get_color_scheme")]
    fn color_scheme(&self) -> SettingsColorScheme {
        unsafe {
            from_glib(ffi::granite_style_manager_get_color_scheme(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_style_manager_set_color_scheme")]
    fn set_color_scheme(&self, value: SettingsColorScheme) {
        unsafe {
            ffi::granite_style_manager_set_color_scheme(
                self.as_ref().to_glib_none().0,
                value.into_glib(),
            );
        }
    }

    #[doc(alias = "granite_style_manager_get_display")]
    #[doc(alias = "get_display")]
    fn display(&self) -> gdk::Display {
        unsafe {
            from_glib_none(ffi::granite_style_manager_get_display(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "color-scheme")]
    fn get_property_color_scheme(&self) -> SettingsColorScheme {
        ObjectExt::property(self.as_ref(), "color-scheme")
    }

    #[doc(alias = "color-scheme")]
    fn set_property_color_scheme(&self, color_scheme: SettingsColorScheme) {
        ObjectExt::set_property(self.as_ref(), "color-scheme", color_scheme)
    }

    fn get_property_display(&self) -> Option<gdk::Display> {
        ObjectExt::property(self.as_ref(), "display")
    }

    #[doc(alias = "color-scheme")]
    fn connect_color_scheme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_color_scheme_trampoline<
            P: IsA<StyleManager>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GraniteStyleManager,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(StyleManager::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::color-scheme".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_color_scheme_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<StyleManager>> StyleManagerExt for O {}
