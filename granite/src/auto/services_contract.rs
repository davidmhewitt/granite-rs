// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,translate::*};
use std::{fmt,ptr};

glib::wrapper! {
    #[doc(alias = "GraniteServicesContract")]
    pub struct ServicesContract(Interface<ffi::GraniteServicesContract, ffi::GraniteServicesContractIface>);

    match fn {
        type_ => || ffi::granite_services_contract_get_type(),
    }
}

impl ServicesContract {
        pub const NONE: Option<&'static ServicesContract> = None;
    
}

pub trait ServicesContractExt: 'static {
    #[doc(alias = "granite_services_contract_get_display_name")]
    #[doc(alias = "get_display_name")]
    fn display_name(&self) -> Option<glib::GString>;

    #[doc(alias = "granite_services_contract_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> Option<glib::GString>;

    #[doc(alias = "granite_services_contract_get_icon")]
    #[doc(alias = "get_icon")]
    fn icon(&self) -> Option<gio::Icon>;

    #[doc(alias = "granite_services_contract_execute_with_file")]
    fn execute_with_file(&self, file: &impl IsA<gio::File>) -> Result<(), glib::Error>;

    #[doc(alias = "granite_services_contract_execute_with_files")]
    fn execute_with_files(&self, files: &[gio::File]) -> Result<(), glib::Error>;
}

impl<O: IsA<ServicesContract>> ServicesContractExt for O {
    fn display_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::granite_services_contract_get_display_name(self.as_ref().to_glib_none().0))
        }
    }

    fn description(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::granite_services_contract_get_description(self.as_ref().to_glib_none().0))
        }
    }

    fn icon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_full(ffi::granite_services_contract_get_icon(self.as_ref().to_glib_none().0))
        }
    }

    fn execute_with_file(&self, file: &impl IsA<gio::File>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::granite_services_contract_execute_with_file(self.as_ref().to_glib_none().0, file.as_ref().to_glib_none().0, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    fn execute_with_files(&self, files: &[gio::File]) -> Result<(), glib::Error> {
        let files_length1 = files.len() as _;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::granite_services_contract_execute_with_files(self.as_ref().to_glib_none().0, files.to_glib_none().0, files_length1, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }
}

impl fmt::Display for ServicesContract {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ServicesContract")
    }
}
