// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{prelude::*, translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GraniteServicesContractorError")]
pub enum ServicesContractorError {
    #[doc(alias = "GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE")]
    ServiceNotAvailable,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for ServicesContractorError {
    type GlibType = ffi::GraniteServicesContractorError;

    #[inline]
    fn into_glib(self) -> ffi::GraniteServicesContractorError {
        match self {
            Self::ServiceNotAvailable => {
                ffi::GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE
            }
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GraniteServicesContractorError> for ServicesContractorError {
    #[inline]
    unsafe fn from_glib(value: ffi::GraniteServicesContractorError) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE => {
                Self::ServiceNotAvailable
            }
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for ServicesContractorError {
    #[inline]
    fn domain() -> glib::Quark {
        skip_assert_initialized!();

        static QUARK: ::std::sync::OnceLock<glib::ffi::GQuark> = ::std::sync::OnceLock::new();
        let quark = *QUARK.get_or_init(|| unsafe {
            glib::ffi::g_quark_from_static_string(
                b"granite-services-contractor-error-quark\0".as_ptr() as *const _,
            )
        });
        unsafe { from_glib(quark) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match unsafe { from_glib(code) } {
            value => Some(value),
        }
    }
}

impl StaticType for ServicesContractorError {
    #[inline]
    #[doc(alias = "granite_services_contractor_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::granite_services_contractor_error_get_type()) }
    }
}

impl glib::HasParamSpec for ServicesContractorError {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for ServicesContractorError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for ServicesContractorError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for ServicesContractorError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<ServicesContractorError> for glib::Value {
    #[inline]
    fn from(v: ServicesContractorError) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GraniteSettingsColorScheme")]
pub enum SettingsColorScheme {
    #[doc(alias = "GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE")]
    NoPreference,
    #[doc(alias = "GRANITE_SETTINGS_COLOR_SCHEME_DARK")]
    Dark,
    #[doc(alias = "GRANITE_SETTINGS_COLOR_SCHEME_LIGHT")]
    Light,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for SettingsColorScheme {
    type GlibType = ffi::GraniteSettingsColorScheme;

    #[inline]
    fn into_glib(self) -> ffi::GraniteSettingsColorScheme {
        match self {
            Self::NoPreference => ffi::GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE,
            Self::Dark => ffi::GRANITE_SETTINGS_COLOR_SCHEME_DARK,
            Self::Light => ffi::GRANITE_SETTINGS_COLOR_SCHEME_LIGHT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GraniteSettingsColorScheme> for SettingsColorScheme {
    #[inline]
    unsafe fn from_glib(value: ffi::GraniteSettingsColorScheme) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE => Self::NoPreference,
            ffi::GRANITE_SETTINGS_COLOR_SCHEME_DARK => Self::Dark,
            ffi::GRANITE_SETTINGS_COLOR_SCHEME_LIGHT => Self::Light,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SettingsColorScheme {
    #[inline]
    #[doc(alias = "granite_settings_color_scheme_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::granite_settings_color_scheme_get_type()) }
    }
}

impl glib::HasParamSpec for SettingsColorScheme {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for SettingsColorScheme {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for SettingsColorScheme {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SettingsColorScheme {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<SettingsColorScheme> for glib::Value {
    #[inline]
    fn from(v: SettingsColorScheme) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GraniteSettingsPageStatusType")]
pub enum SettingsPageStatusType {
    #[doc(alias = "GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR")]
    Error,
    #[doc(alias = "GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE")]
    Offline,
    #[doc(alias = "GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS")]
    Success,
    #[doc(alias = "GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING")]
    Warning,
    #[doc(alias = "GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE")]
    None,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for SettingsPageStatusType {
    type GlibType = ffi::GraniteSettingsPageStatusType;

    #[inline]
    fn into_glib(self) -> ffi::GraniteSettingsPageStatusType {
        match self {
            Self::Error => ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR,
            Self::Offline => ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE,
            Self::Success => ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS,
            Self::Warning => ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING,
            Self::None => ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GraniteSettingsPageStatusType> for SettingsPageStatusType {
    #[inline]
    unsafe fn from_glib(value: ffi::GraniteSettingsPageStatusType) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR => Self::Error,
            ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE => Self::Offline,
            ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS => Self::Success,
            ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING => Self::Warning,
            ffi::GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE => Self::None,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for SettingsPageStatusType {
    #[inline]
    #[doc(alias = "granite_settings_page_status_type_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::granite_settings_page_status_type_get_type()) }
    }
}

impl glib::HasParamSpec for SettingsPageStatusType {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for SettingsPageStatusType {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for SettingsPageStatusType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SettingsPageStatusType {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<SettingsPageStatusType> for glib::Value {
    #[inline]
    fn from(v: SettingsPageStatusType) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}
