// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GraniteServicesContractorProxy")]
    pub struct ServicesContractorProxy(Object<ffi::GraniteServicesContractorProxy, ffi::GraniteServicesContractorProxyClass>);

    match fn {
        type_ => || ffi::granite_services_contractor_proxy_get_type(),
    }
}

impl ServicesContractorProxy {
    pub const NONE: Option<&'static ServicesContractorProxy> = None;

    #[doc(alias = "granite_services_contractor_proxy_get_instance")]
    #[doc(alias = "get_instance")]
    pub fn instance() -> Result<ServicesContractorProxy, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::granite_services_contractor_proxy_get_instance(&mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ServicesContractorProxy>> Sealed for T {}
}

pub trait ServicesContractorProxyExt:
    IsA<ServicesContractorProxy> + sealed::Sealed + 'static
{
    #[doc(alias = "contracts-changed")]
    fn connect_contracts_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn contracts_changed_trampoline<
            P: IsA<ServicesContractorProxy>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GraniteServicesContractorProxy,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ServicesContractorProxy::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"contracts-changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    contracts_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<ServicesContractorProxy>> ServicesContractorProxyExt for O {}
