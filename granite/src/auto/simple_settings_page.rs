// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, SettingsPage};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GraniteSimpleSettingsPage")]
    pub struct SimpleSettingsPage(Object<ffi::GraniteSimpleSettingsPage, ffi::GraniteSimpleSettingsPageClass>) @extends SettingsPage, gtk::Box, gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget, gtk::Orientable;

    match fn {
        type_ => || ffi::granite_simple_settings_page_get_type(),
    }
}

impl SimpleSettingsPage {
    pub const NONE: Option<&'static SimpleSettingsPage> = None;
}

pub trait SimpleSettingsPageExt: IsA<SimpleSettingsPage> + 'static {
    #[doc(alias = "granite_simple_settings_page_get_action_area")]
    #[doc(alias = "get_action_area")]
    fn action_area(&self) -> gtk::Box {
        unsafe {
            from_glib_none(ffi::granite_simple_settings_page_get_action_area(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_simple_settings_page_get_content_area")]
    #[doc(alias = "get_content_area")]
    fn content_area(&self) -> gtk::Grid {
        unsafe {
            from_glib_none(ffi::granite_simple_settings_page_get_content_area(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_simple_settings_page_get_status_switch")]
    #[doc(alias = "get_status_switch")]
    fn status_switch(&self) -> Option<gtk::Switch> {
        unsafe {
            from_glib_none(ffi::granite_simple_settings_page_get_status_switch(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_simple_settings_page_get_activatable")]
    #[doc(alias = "get_activatable")]
    fn is_activatable(&self) -> bool {
        unsafe {
            from_glib(ffi::granite_simple_settings_page_get_activatable(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_simple_settings_page_get_description")]
    #[doc(alias = "get_description")]
    fn description(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::granite_simple_settings_page_get_description(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_simple_settings_page_set_description")]
    fn set_description(&self, value: &str) {
        unsafe {
            ffi::granite_simple_settings_page_set_description(
                self.as_ref().to_glib_none().0,
                value.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "description")]
    fn connect_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<
            P: IsA<SimpleSettingsPage>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GraniteSimpleSettingsPage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SimpleSettingsPage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::description\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_description_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<SimpleSettingsPage>> SimpleSettingsPageExt for O {}
