// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{SettingsColorScheme};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "GraniteSettings")]
    pub struct Settings(Object<ffi::GraniteSettings, ffi::GraniteSettingsClass>);

    match fn {
        type_ => || ffi::granite_settings_get_type(),
    }
}

impl Settings {
        pub const NONE: Option<&'static Settings> = None;
    

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Settings`] objects.
            ///
            /// This method returns an instance of [`SettingsBuilder`](crate::builders::SettingsBuilder) which can be used to create [`Settings`] objects.
            pub fn builder() -> SettingsBuilder {
                SettingsBuilder::new()
            }
        

    #[doc(alias = "granite_settings_get_default")]
    #[doc(alias = "get_default")]
    #[allow(clippy::should_implement_trait)]    pub fn default() -> Option<Settings> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::granite_settings_get_default())
        }
    }
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Settings`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct SettingsBuilder {
            builder: glib::object::ObjectBuilder<'static, Settings>,
        }

        impl SettingsBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn prefers_color_scheme(self, prefers_color_scheme: SettingsColorScheme) -> Self {
                            Self { builder: self.builder.property("prefers-color-scheme", prefers_color_scheme), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Settings`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Settings {
    self.builder.build() }
}

pub trait SettingsExt: 'static {
    #[doc(alias = "granite_settings_get_prefers_color_scheme")]
    #[doc(alias = "get_prefers_color_scheme")]
    fn prefers_color_scheme(&self) -> SettingsColorScheme;

    #[doc(alias = "prefers-color-scheme")]
    fn set_prefers_color_scheme(&self, prefers_color_scheme: SettingsColorScheme);

    #[doc(alias = "prefers-color-scheme")]
    fn connect_prefers_color_scheme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Settings>> SettingsExt for O {
    fn prefers_color_scheme(&self) -> SettingsColorScheme {
        unsafe {
            from_glib(ffi::granite_settings_get_prefers_color_scheme(self.as_ref().to_glib_none().0))
        }
    }

    fn set_prefers_color_scheme(&self, prefers_color_scheme: SettingsColorScheme) {
        glib::ObjectExt::set_property(self.as_ref(),"prefers-color-scheme", &prefers_color_scheme)
    }

    fn connect_prefers_color_scheme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_prefers_color_scheme_trampoline<P: IsA<Settings>, F: Fn(&P) + 'static>(this: *mut ffi::GraniteSettings, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Settings::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::prefers-color-scheme\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_prefers_color_scheme_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Settings {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Settings")
    }
}
