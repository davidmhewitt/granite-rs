// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GraniteServicesSystem")]
    pub struct ServicesSystem(Object<ffi::GraniteServicesSystem, ffi::GraniteServicesSystemClass>);

    match fn {
        type_ => || ffi::granite_services_system_get_type(),
    }
}

impl ServicesSystem {
    pub const NONE: Option<&'static ServicesSystem> = None;

    #[doc(alias = "granite_services_system_new")]
    pub fn new() -> ServicesSystem {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::granite_services_system_new()) }
    }

    #[doc(alias = "granite_services_system_history_is_enabled")]
    pub fn history_is_enabled() -> bool {
        assert_initialized_main_thread!();
        unsafe { from_glib(ffi::granite_services_system_history_is_enabled()) }
    }
}

impl Default for ServicesSystem {
    fn default() -> Self {
        Self::new()
    }
}

impl fmt::Display for ServicesSystem {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ServicesSystem")
    }
}
