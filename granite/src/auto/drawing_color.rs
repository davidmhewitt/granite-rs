// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ServicesSettingsSerializable;
use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GraniteDrawingColor")]
    pub struct DrawingColor(Object<ffi::GraniteDrawingColor, ffi::GraniteDrawingColorClass>) @implements ServicesSettingsSerializable;

    match fn {
        type_ => || ffi::granite_drawing_color_get_type(),
    }
}

impl DrawingColor {
    pub const NONE: Option<&'static DrawingColor> = None;

    #[doc(alias = "granite_drawing_color_new")]
    pub fn new(R: f64, G: f64, B: f64, A: f64) -> DrawingColor {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::granite_drawing_color_new(R, G, B, A)) }
    }

    #[doc(alias = "granite_drawing_color_new_from_rgba")]
    pub fn from_rgba(color: &mut gdk::RGBA) -> DrawingColor {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::granite_drawing_color_new_from_rgba(
                color.to_glib_none_mut().0,
            ))
        }
    }

    #[doc(alias = "granite_drawing_color_new_from_string")]
    pub fn from_string(color: &str) -> DrawingColor {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::granite_drawing_color_new_from_string(
                color.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "granite_drawing_color_new_from_int")]
    pub fn from_int(color: i32) -> DrawingColor {
        assert_initialized_main_thread!();
        unsafe { from_glib_full(ffi::granite_drawing_color_new_from_int(color)) }
    }

    #[doc(alias = "granite_drawing_color_alpha_from_int")]
    pub fn alpha_from_int(color: i32) -> u8 {
        assert_initialized_main_thread!();
        unsafe { ffi::granite_drawing_color_alpha_from_int(color) }
    }

    #[doc(alias = "granite_drawing_color_red_from_int")]
    pub fn red_from_int(color: i32) -> u8 {
        assert_initialized_main_thread!();
        unsafe { ffi::granite_drawing_color_red_from_int(color) }
    }

    #[doc(alias = "granite_drawing_color_green_from_int")]
    pub fn green_from_int(color: i32) -> u8 {
        assert_initialized_main_thread!();
        unsafe { ffi::granite_drawing_color_green_from_int(color) }
    }

    #[doc(alias = "granite_drawing_color_blue_from_int")]
    pub fn blue_from_int(color: i32) -> u8 {
        assert_initialized_main_thread!();
        unsafe { ffi::granite_drawing_color_blue_from_int(color) }
    }
}

impl fmt::Display for DrawingColor {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&DrawingColorExt::to_str(self))
    }
}

pub trait DrawingColorExt: 'static {
    #[doc(alias = "granite_drawing_color_set_hue")]
    #[must_use]
    fn set_hue(&self, hue: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_sat")]
    #[must_use]
    fn set_sat(&self, sat: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_val")]
    #[must_use]
    fn set_val(&self, val: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_alpha")]
    #[must_use]
    fn set_alpha(&self, alpha: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_get_hue")]
    #[doc(alias = "get_hue")]
    fn hue(&self) -> f64;

    #[doc(alias = "granite_drawing_color_get_sat")]
    #[doc(alias = "get_sat")]
    fn sat(&self) -> f64;

    #[doc(alias = "granite_drawing_color_get_val")]
    #[doc(alias = "get_val")]
    fn val(&self) -> f64;

    #[doc(alias = "granite_drawing_color_add_hue")]
    #[must_use]
    fn add_hue(&self, val: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_min_sat")]
    #[must_use]
    fn set_min_sat(&self, sat: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_min_value")]
    #[must_use]
    fn set_min_value(&self, val: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_max_sat")]
    #[must_use]
    fn set_max_sat(&self, sat: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_set_max_val")]
    #[must_use]
    fn set_max_val(&self, val: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_multiply_sat")]
    #[must_use]
    fn multiply_sat(&self, amount: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_brighten_val")]
    #[must_use]
    fn brighten_val(&self, amount: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_darken_val")]
    #[must_use]
    fn darken_val(&self, amount: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_darken_by_sat")]
    #[must_use]
    fn darken_by_sat(&self, amount: f64) -> Option<DrawingColor>;

    #[doc(alias = "granite_drawing_color_to_string")]
    #[doc(alias = "to_string")]
    fn to_str(&self) -> glib::GString;

    #[doc(alias = "granite_drawing_color_to_int")]
    fn to_int(&self) -> i32;
}

impl<O: IsA<DrawingColor>> DrawingColorExt for O {
    fn set_hue(&self, hue: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_hue(
                self.as_ref().to_glib_none().0,
                hue,
            ))
        }
    }

    fn set_sat(&self, sat: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_sat(
                self.as_ref().to_glib_none().0,
                sat,
            ))
        }
    }

    fn set_val(&self, val: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_val(
                self.as_ref().to_glib_none().0,
                val,
            ))
        }
    }

    fn set_alpha(&self, alpha: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_alpha(
                self.as_ref().to_glib_none().0,
                alpha,
            ))
        }
    }

    fn hue(&self) -> f64 {
        unsafe { ffi::granite_drawing_color_get_hue(self.as_ref().to_glib_none().0) }
    }

    fn sat(&self) -> f64 {
        unsafe { ffi::granite_drawing_color_get_sat(self.as_ref().to_glib_none().0) }
    }

    fn val(&self) -> f64 {
        unsafe { ffi::granite_drawing_color_get_val(self.as_ref().to_glib_none().0) }
    }

    fn add_hue(&self, val: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_add_hue(
                self.as_ref().to_glib_none().0,
                val,
            ))
        }
    }

    fn set_min_sat(&self, sat: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_min_sat(
                self.as_ref().to_glib_none().0,
                sat,
            ))
        }
    }

    fn set_min_value(&self, val: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_min_value(
                self.as_ref().to_glib_none().0,
                val,
            ))
        }
    }

    fn set_max_sat(&self, sat: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_max_sat(
                self.as_ref().to_glib_none().0,
                sat,
            ))
        }
    }

    fn set_max_val(&self, val: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_set_max_val(
                self.as_ref().to_glib_none().0,
                val,
            ))
        }
    }

    fn multiply_sat(&self, amount: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_multiply_sat(
                self.as_ref().to_glib_none().0,
                amount,
            ))
        }
    }

    fn brighten_val(&self, amount: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_brighten_val(
                self.as_ref().to_glib_none().0,
                amount,
            ))
        }
    }

    fn darken_val(&self, amount: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_darken_val(
                self.as_ref().to_glib_none().0,
                amount,
            ))
        }
    }

    fn darken_by_sat(&self, amount: f64) -> Option<DrawingColor> {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_darken_by_sat(
                self.as_ref().to_glib_none().0,
                amount,
            ))
        }
    }

    fn to_str(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::granite_drawing_color_to_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn to_int(&self) -> i32 {
        unsafe { ffi::granite_drawing_color_to_int(self.as_ref().to_glib_none().0) }
    }
}
