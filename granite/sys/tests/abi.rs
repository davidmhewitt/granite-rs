// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#![cfg(unix)]

use granite_sys::*;
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::mem::{align_of, size_of};
use std::path::Path;
use std::process::{Command, Stdio};
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["granite-7"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG").unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!("Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",);
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut cmd = Command::new(exe);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }

    Ok(String::from_utf8(out.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    (
        "GraniteAccelLabel",
        Layout {
            size: size_of::<GraniteAccelLabel>(),
            alignment: align_of::<GraniteAccelLabel>(),
        },
    ),
    (
        "GraniteAccelLabelClass",
        Layout {
            size: size_of::<GraniteAccelLabelClass>(),
            alignment: align_of::<GraniteAccelLabelClass>(),
        },
    ),
    (
        "GraniteBackButton",
        Layout {
            size: size_of::<GraniteBackButton>(),
            alignment: align_of::<GraniteBackButton>(),
        },
    ),
    (
        "GraniteBackButtonClass",
        Layout {
            size: size_of::<GraniteBackButtonClass>(),
            alignment: align_of::<GraniteBackButtonClass>(),
        },
    ),
    (
        "GraniteBin",
        Layout {
            size: size_of::<GraniteBin>(),
            alignment: align_of::<GraniteBin>(),
        },
    ),
    (
        "GraniteBinClass",
        Layout {
            size: size_of::<GraniteBinClass>(),
            alignment: align_of::<GraniteBinClass>(),
        },
    ),
    (
        "GraniteBox",
        Layout {
            size: size_of::<GraniteBox>(),
            alignment: align_of::<GraniteBox>(),
        },
    ),
    (
        "GraniteBoxClass",
        Layout {
            size: size_of::<GraniteBoxClass>(),
            alignment: align_of::<GraniteBoxClass>(),
        },
    ),
    (
        "GraniteBoxSpacing",
        Layout {
            size: size_of::<GraniteBoxSpacing>(),
            alignment: align_of::<GraniteBoxSpacing>(),
        },
    ),
    (
        "GraniteDatePicker",
        Layout {
            size: size_of::<GraniteDatePicker>(),
            alignment: align_of::<GraniteDatePicker>(),
        },
    ),
    (
        "GraniteDatePickerClass",
        Layout {
            size: size_of::<GraniteDatePickerClass>(),
            alignment: align_of::<GraniteDatePickerClass>(),
        },
    ),
    (
        "GraniteDialog",
        Layout {
            size: size_of::<GraniteDialog>(),
            alignment: align_of::<GraniteDialog>(),
        },
    ),
    (
        "GraniteDialogClass",
        Layout {
            size: size_of::<GraniteDialogClass>(),
            alignment: align_of::<GraniteDialogClass>(),
        },
    ),
    (
        "GraniteHeaderLabel",
        Layout {
            size: size_of::<GraniteHeaderLabel>(),
            alignment: align_of::<GraniteHeaderLabel>(),
        },
    ),
    (
        "GraniteHeaderLabelClass",
        Layout {
            size: size_of::<GraniteHeaderLabelClass>(),
            alignment: align_of::<GraniteHeaderLabelClass>(),
        },
    ),
    (
        "GraniteHeaderLabelSize",
        Layout {
            size: size_of::<GraniteHeaderLabelSize>(),
            alignment: align_of::<GraniteHeaderLabelSize>(),
        },
    ),
    (
        "GraniteHyperTextView",
        Layout {
            size: size_of::<GraniteHyperTextView>(),
            alignment: align_of::<GraniteHyperTextView>(),
        },
    ),
    (
        "GraniteHyperTextViewClass",
        Layout {
            size: size_of::<GraniteHyperTextViewClass>(),
            alignment: align_of::<GraniteHyperTextViewClass>(),
        },
    ),
    (
        "GraniteListItem",
        Layout {
            size: size_of::<GraniteListItem>(),
            alignment: align_of::<GraniteListItem>(),
        },
    ),
    (
        "GraniteListItemClass",
        Layout {
            size: size_of::<GraniteListItemClass>(),
            alignment: align_of::<GraniteListItemClass>(),
        },
    ),
    (
        "GraniteMessageDialog",
        Layout {
            size: size_of::<GraniteMessageDialog>(),
            alignment: align_of::<GraniteMessageDialog>(),
        },
    ),
    (
        "GraniteMessageDialogClass",
        Layout {
            size: size_of::<GraniteMessageDialogClass>(),
            alignment: align_of::<GraniteMessageDialogClass>(),
        },
    ),
    (
        "GraniteModeSwitch",
        Layout {
            size: size_of::<GraniteModeSwitch>(),
            alignment: align_of::<GraniteModeSwitch>(),
        },
    ),
    (
        "GraniteModeSwitchClass",
        Layout {
            size: size_of::<GraniteModeSwitchClass>(),
            alignment: align_of::<GraniteModeSwitchClass>(),
        },
    ),
    (
        "GraniteOverlayBar",
        Layout {
            size: size_of::<GraniteOverlayBar>(),
            alignment: align_of::<GraniteOverlayBar>(),
        },
    ),
    (
        "GraniteOverlayBarClass",
        Layout {
            size: size_of::<GraniteOverlayBarClass>(),
            alignment: align_of::<GraniteOverlayBarClass>(),
        },
    ),
    (
        "GranitePlaceholder",
        Layout {
            size: size_of::<GranitePlaceholder>(),
            alignment: align_of::<GranitePlaceholder>(),
        },
    ),
    (
        "GranitePlaceholderClass",
        Layout {
            size: size_of::<GranitePlaceholderClass>(),
            alignment: align_of::<GranitePlaceholderClass>(),
        },
    ),
    (
        "GraniteServicesContractIface",
        Layout {
            size: size_of::<GraniteServicesContractIface>(),
            alignment: align_of::<GraniteServicesContractIface>(),
        },
    ),
    (
        "GraniteServicesContractorError",
        Layout {
            size: size_of::<GraniteServicesContractorError>(),
            alignment: align_of::<GraniteServicesContractorError>(),
        },
    ),
    (
        "GraniteServicesContractorProxy",
        Layout {
            size: size_of::<GraniteServicesContractorProxy>(),
            alignment: align_of::<GraniteServicesContractorProxy>(),
        },
    ),
    (
        "GraniteServicesContractorProxyClass",
        Layout {
            size: size_of::<GraniteServicesContractorProxyClass>(),
            alignment: align_of::<GraniteServicesContractorProxyClass>(),
        },
    ),
    (
        "GraniteServicesSettingsSerializableIface",
        Layout {
            size: size_of::<GraniteServicesSettingsSerializableIface>(),
            alignment: align_of::<GraniteServicesSettingsSerializableIface>(),
        },
    ),
    (
        "GraniteServicesSystem",
        Layout {
            size: size_of::<GraniteServicesSystem>(),
            alignment: align_of::<GraniteServicesSystem>(),
        },
    ),
    (
        "GraniteServicesSystemClass",
        Layout {
            size: size_of::<GraniteServicesSystemClass>(),
            alignment: align_of::<GraniteServicesSystemClass>(),
        },
    ),
    (
        "GraniteSettings",
        Layout {
            size: size_of::<GraniteSettings>(),
            alignment: align_of::<GraniteSettings>(),
        },
    ),
    (
        "GraniteSettingsClass",
        Layout {
            size: size_of::<GraniteSettingsClass>(),
            alignment: align_of::<GraniteSettingsClass>(),
        },
    ),
    (
        "GraniteSettingsColorScheme",
        Layout {
            size: size_of::<GraniteSettingsColorScheme>(),
            alignment: align_of::<GraniteSettingsColorScheme>(),
        },
    ),
    (
        "GraniteSettingsPage",
        Layout {
            size: size_of::<GraniteSettingsPage>(),
            alignment: align_of::<GraniteSettingsPage>(),
        },
    ),
    (
        "GraniteSettingsPageClass",
        Layout {
            size: size_of::<GraniteSettingsPageClass>(),
            alignment: align_of::<GraniteSettingsPageClass>(),
        },
    ),
    (
        "GraniteSettingsPageStatusType",
        Layout {
            size: size_of::<GraniteSettingsPageStatusType>(),
            alignment: align_of::<GraniteSettingsPageStatusType>(),
        },
    ),
    (
        "GraniteSettingsSidebar",
        Layout {
            size: size_of::<GraniteSettingsSidebar>(),
            alignment: align_of::<GraniteSettingsSidebar>(),
        },
    ),
    (
        "GraniteSettingsSidebarClass",
        Layout {
            size: size_of::<GraniteSettingsSidebarClass>(),
            alignment: align_of::<GraniteSettingsSidebarClass>(),
        },
    ),
    (
        "GraniteSimpleSettingsPage",
        Layout {
            size: size_of::<GraniteSimpleSettingsPage>(),
            alignment: align_of::<GraniteSimpleSettingsPage>(),
        },
    ),
    (
        "GraniteSimpleSettingsPageClass",
        Layout {
            size: size_of::<GraniteSimpleSettingsPageClass>(),
            alignment: align_of::<GraniteSimpleSettingsPageClass>(),
        },
    ),
    (
        "GraniteStyleManager",
        Layout {
            size: size_of::<GraniteStyleManager>(),
            alignment: align_of::<GraniteStyleManager>(),
        },
    ),
    (
        "GraniteStyleManagerClass",
        Layout {
            size: size_of::<GraniteStyleManagerClass>(),
            alignment: align_of::<GraniteStyleManagerClass>(),
        },
    ),
    (
        "GraniteSwitchModelButton",
        Layout {
            size: size_of::<GraniteSwitchModelButton>(),
            alignment: align_of::<GraniteSwitchModelButton>(),
        },
    ),
    (
        "GraniteSwitchModelButtonClass",
        Layout {
            size: size_of::<GraniteSwitchModelButtonClass>(),
            alignment: align_of::<GraniteSwitchModelButtonClass>(),
        },
    ),
    (
        "GraniteTimePicker",
        Layout {
            size: size_of::<GraniteTimePicker>(),
            alignment: align_of::<GraniteTimePicker>(),
        },
    ),
    (
        "GraniteTimePickerClass",
        Layout {
            size: size_of::<GraniteTimePickerClass>(),
            alignment: align_of::<GraniteTimePickerClass>(),
        },
    ),
    (
        "GraniteToast",
        Layout {
            size: size_of::<GraniteToast>(),
            alignment: align_of::<GraniteToast>(),
        },
    ),
    (
        "GraniteToastClass",
        Layout {
            size: size_of::<GraniteToastClass>(),
            alignment: align_of::<GraniteToastClass>(),
        },
    ),
    (
        "GraniteToastDismissReason",
        Layout {
            size: size_of::<GraniteToastDismissReason>(),
            alignment: align_of::<GraniteToastDismissReason>(),
        },
    ),
    (
        "GraniteToolBox",
        Layout {
            size: size_of::<GraniteToolBox>(),
            alignment: align_of::<GraniteToolBox>(),
        },
    ),
    (
        "GraniteToolBoxClass",
        Layout {
            size: size_of::<GraniteToolBoxClass>(),
            alignment: align_of::<GraniteToolBoxClass>(),
        },
    ),
    (
        "GraniteValidatedEntry",
        Layout {
            size: size_of::<GraniteValidatedEntry>(),
            alignment: align_of::<GraniteValidatedEntry>(),
        },
    ),
    (
        "GraniteValidatedEntryClass",
        Layout {
            size: size_of::<GraniteValidatedEntryClass>(),
            alignment: align_of::<GraniteValidatedEntryClass>(),
        },
    ),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) GRANITE_BOX_SPACING_DOUBLE", "3"),
    ("(gint) GRANITE_BOX_SPACING_HALF", "1"),
    ("(gint) GRANITE_BOX_SPACING_LINKED", "4"),
    ("(gint) GRANITE_BOX_SPACING_NONE", "0"),
    ("(gint) GRANITE_BOX_SPACING_SINGLE", "2"),
    ("GRANITE_CSS_CLASS_ACCENT", "accent"),
    ("GRANITE_CSS_CLASS_CARD", "card"),
    ("GRANITE_CSS_CLASS_CHECKERBOARD", "checkerboard"),
    ("GRANITE_CSS_CLASS_CIRCULAR", "circular"),
    ("GRANITE_CSS_CLASS_DESTRUCTIVE", "destructive"),
    ("GRANITE_CSS_CLASS_DIM", "dim-label"),
    ("GRANITE_CSS_CLASS_ERROR", "error"),
    ("GRANITE_CSS_CLASS_MONOSPACE", "monospace"),
    ("GRANITE_CSS_CLASS_NUMERIC", "numeric"),
    ("GRANITE_CSS_CLASS_SMALL", "small-label"),
    ("GRANITE_CSS_CLASS_SUCCESS", "success"),
    ("GRANITE_CSS_CLASS_SUGGESTED", "suggested"),
    ("GRANITE_CSS_CLASS_WARNING", "warning"),
    ("(gint) GRANITE_HEADER_LABEL_SIZE_H1", "0"),
    ("(gint) GRANITE_HEADER_LABEL_SIZE_H2", "1"),
    ("(gint) GRANITE_HEADER_LABEL_SIZE_H3", "2"),
    ("(gint) GRANITE_HEADER_LABEL_SIZE_H4", "3"),
    (
        "(gint) GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE",
        "0",
    ),
    ("(gint) GRANITE_SETTINGS_COLOR_SCHEME_DARK", "1"),
    ("(gint) GRANITE_SETTINGS_COLOR_SCHEME_LIGHT", "2"),
    ("(gint) GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE", "0"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR", "0"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE", "4"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE", "1"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS", "2"),
    ("(gint) GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING", "3"),
    (
        "GRANITE_SETTINGS_URI_LOCATION",
        "settings://privacy/location",
    ),
    ("GRANITE_SETTINGS_URI_NETWORK", "settings://network"),
    (
        "GRANITE_SETTINGS_URI_NOTIFICATIONS",
        "settings://notifications",
    ),
    (
        "GRANITE_SETTINGS_URI_ONLINE_ACCOUNTS",
        "settings://accounts/online",
    ),
    (
        "GRANITE_SETTINGS_URI_PERMISSIONS",
        "settings://applications/permissions",
    ),
    (
        "GRANITE_SETTINGS_URI_SHORTCUTS",
        "settings://input/keyboard/shortcuts/custom",
    ),
    ("GRANITE_SETTINGS_URI_SOUND_INPUT", "settings://sound/input"),
    ("GRANITE_STYLE_CLASS_ACCENT", "accent"),
    ("GRANITE_STYLE_CLASS_BACKGROUND", "background"),
    ("GRANITE_STYLE_CLASS_BACK_BUTTON", "back-button"),
    ("GRANITE_STYLE_CLASS_BADGE", "badge"),
    ("GRANITE_STYLE_CLASS_CARD", "card"),
    ("GRANITE_STYLE_CLASS_CHECKERBOARD", "checkerboard"),
    ("GRANITE_STYLE_CLASS_CIRCULAR", "circular"),
    ("GRANITE_STYLE_CLASS_COLOR_BUTTON", "color-button"),
    (
        "GRANITE_STYLE_CLASS_DEFAULT_DECORATION",
        "default-decoration",
    ),
    (
        "GRANITE_STYLE_CLASS_DESTRUCTIVE_ACTION",
        "destructive-action",
    ),
    (
        "GRANITE_STYLE_CLASS_DIALOG_CONTENT_AREA",
        "dialog-content-area",
    ),
    ("GRANITE_STYLE_CLASS_DIM_LABEL", "dim-label"),
    ("GRANITE_STYLE_CLASS_ERROR", "error"),
    ("GRANITE_STYLE_CLASS_FLAT", "flat"),
    ("GRANITE_STYLE_CLASS_FRAME", "frame"),
    ("GRANITE_STYLE_CLASS_H1_LABEL", "title-1"),
    ("GRANITE_STYLE_CLASS_H2_LABEL", "title-2"),
    ("GRANITE_STYLE_CLASS_H3_LABEL", "title-3"),
    ("GRANITE_STYLE_CLASS_H4_LABEL", "title-4"),
    ("GRANITE_STYLE_CLASS_KEYCAP", "keycap"),
    ("GRANITE_STYLE_CLASS_LARGE_ICONS", "large-icons"),
    ("GRANITE_STYLE_CLASS_LINKED", "linked"),
    ("GRANITE_STYLE_CLASS_MENU", "menu"),
    ("GRANITE_STYLE_CLASS_MENUITEM", "menuitem"),
    ("GRANITE_STYLE_CLASS_MESSAGE_DIALOG", "message"),
    ("GRANITE_STYLE_CLASS_MODE_SWITCH", "mode-switch"),
    ("GRANITE_STYLE_CLASS_OSD", "osd"),
    ("GRANITE_STYLE_CLASS_RICH_LIST", "rich-list"),
    ("GRANITE_STYLE_CLASS_ROUNDED", "rounded"),
    ("GRANITE_STYLE_CLASS_SIDEBAR", "sidebar"),
    ("GRANITE_STYLE_CLASS_SMALL_LABEL", "small-label"),
    ("GRANITE_STYLE_CLASS_SUCCESS", "success"),
    ("GRANITE_STYLE_CLASS_SUGGESTED_ACTION", "suggested-action"),
    ("GRANITE_STYLE_CLASS_TEMPERATURE", "temperature"),
    ("GRANITE_STYLE_CLASS_TERMINAL", "terminal"),
    ("GRANITE_STYLE_CLASS_TITLE_LABEL", "title"),
    ("GRANITE_STYLE_CLASS_VIEW", "view"),
    ("GRANITE_STYLE_CLASS_WARMTH", "warmth"),
    ("GRANITE_STYLE_CLASS_WARNING", "warning"),
    ("(gint) GRANITE_TOAST_DISMISS_REASON_CLOSED", "2"),
    ("(gint) GRANITE_TOAST_DISMISS_REASON_EXPIRED", "1"),
    ("(gint) GRANITE_TOAST_DISMISS_REASON_WITHDRAWN", "3"),
    (
        "GRANITE_TOOLTIP_SECONDARY_TEXT_MARKUP",
        "<span weight=\"600\" size=\"smaller\" alpha=\"75%\">%s</span>",
    ),
    ("GRANITE_TRANSITION_DURATION_CLOSE", "200"),
    ("GRANITE_TRANSITION_DURATION_IN_PLACE", "100"),
    ("GRANITE_TRANSITION_DURATION_OPEN", "250"),
];
