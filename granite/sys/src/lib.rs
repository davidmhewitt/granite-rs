// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, size_t, ssize_t, uintptr_t, FILE,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type GraniteServicesContractorError = c_int;
pub const GRANITE_SERVICES_CONTRACTOR_ERROR_SERVICE_NOT_AVAILABLE: GraniteServicesContractorError =
    0;

pub type GraniteSettingsColorScheme = c_int;
pub const GRANITE_SETTINGS_COLOR_SCHEME_NO_PREFERENCE: GraniteSettingsColorScheme = 0;
pub const GRANITE_SETTINGS_COLOR_SCHEME_DARK: GraniteSettingsColorScheme = 1;
pub const GRANITE_SETTINGS_COLOR_SCHEME_LIGHT: GraniteSettingsColorScheme = 2;

pub type GraniteSettingsPageStatusType = c_int;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_ERROR: GraniteSettingsPageStatusType = 0;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_OFFLINE: GraniteSettingsPageStatusType = 1;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_SUCCESS: GraniteSettingsPageStatusType = 2;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_WARNING: GraniteSettingsPageStatusType = 3;
pub const GRANITE_SETTINGS_PAGE_STATUS_TYPE_NONE: GraniteSettingsPageStatusType = 4;

// Constants
pub const GRANITE_SETTINGS_URI_LOCATION: &[u8] = b"settings://privacy/location\0";
pub const GRANITE_SETTINGS_URI_ONLINE_ACCOUNTS: &[u8] = b"settings://accounts/online\0";
pub const GRANITE_SETTINGS_URI_NETWORK: &[u8] = b"settings://network\0";
pub const GRANITE_SETTINGS_URI_PERMISSIONS: &[u8] = b"settings://applications/permissions\0";
pub const GRANITE_SETTINGS_URI_NOTIFICATIONS: &[u8] = b"settings://notifications\0";
pub const GRANITE_SETTINGS_URI_SOUND_INPUT: &[u8] = b"settings://sound/input\0";
pub const GRANITE_SETTINGS_URI_SHORTCUTS: &[u8] = b"settings://input/keyboard/shortcuts/custom\0";
pub const GRANITE_STYLE_CLASS_ACCENT: &[u8] = b"accent\0";
pub const GRANITE_STYLE_CLASS_BACK_BUTTON: &[u8] = b"back-button\0";
pub const GRANITE_STYLE_CLASS_BACKGROUND: &[u8] = b"background\0";
pub const GRANITE_STYLE_CLASS_BADGE: &[u8] = b"badge\0";
pub const GRANITE_STYLE_CLASS_CARD: &[u8] = b"card\0";
pub const GRANITE_STYLE_CLASS_CHECKERBOARD: &[u8] = b"checkerboard\0";
pub const GRANITE_STYLE_CLASS_CIRCULAR: &[u8] = b"circular\0";
pub const GRANITE_STYLE_CLASS_COLOR_BUTTON: &[u8] = b"color-button\0";
pub const GRANITE_STYLE_CLASS_DEFAULT_DECORATION: &[u8] = b"default-decoration\0";
pub const GRANITE_STYLE_CLASS_DESTRUCTIVE_ACTION: &[u8] = b"destructive-action\0";
pub const GRANITE_STYLE_CLASS_DIALOG_CONTENT_AREA: &[u8] = b"dialog-content-area\0";
pub const GRANITE_STYLE_CLASS_FRAME: &[u8] = b"frame\0";
pub const GRANITE_STYLE_CLASS_H1_LABEL: &[u8] = b"title-1\0";
pub const GRANITE_STYLE_CLASS_H2_LABEL: &[u8] = b"title-2\0";
pub const GRANITE_STYLE_CLASS_H3_LABEL: &[u8] = b"title-3\0";
pub const GRANITE_STYLE_CLASS_H4_LABEL: &[u8] = b"title-4\0";
pub const GRANITE_STYLE_CLASS_KEYCAP: &[u8] = b"keycap\0";
pub const GRANITE_STYLE_CLASS_LARGE_ICONS: &[u8] = b"large-icons\0";
pub const GRANITE_STYLE_CLASS_MODE_SWITCH: &[u8] = b"mode-switch\0";
pub const GRANITE_STYLE_CLASS_OSD: &[u8] = b"osd\0";
pub const GRANITE_STYLE_CLASS_ROUNDED: &[u8] = b"rounded\0";
pub const GRANITE_STYLE_CLASS_SIDEBAR: &[u8] = b"sidebar\0";
pub const GRANITE_STYLE_CLASS_SMALL_LABEL: &[u8] = b"small-label\0";
pub const GRANITE_STYLE_CLASS_TERMINAL: &[u8] = b"terminal\0";
pub const GRANITE_STYLE_CLASS_TITLE_LABEL: &[u8] = b"title\0";
pub const GRANITE_STYLE_CLASS_WARMTH: &[u8] = b"warmth\0";
pub const GRANITE_STYLE_CLASS_TEMPERATURE: &[u8] = b"temperature\0";
pub const GRANITE_STYLE_CLASS_LINKED: &[u8] = b"linked\0";
pub const GRANITE_STYLE_CLASS_MENU: &[u8] = b"menu\0";
pub const GRANITE_STYLE_CLASS_MENUITEM: &[u8] = b"menuitem\0";
pub const GRANITE_STYLE_CLASS_DIM_LABEL: &[u8] = b"dim-label\0";
pub const GRANITE_STYLE_CLASS_ERROR: &[u8] = b"error\0";
pub const GRANITE_STYLE_CLASS_FLAT: &[u8] = b"flat\0";
pub const GRANITE_STYLE_CLASS_MESSAGE_DIALOG: &[u8] = b"message\0";
pub const GRANITE_STYLE_CLASS_RICH_LIST: &[u8] = b"rich-list\0";
pub const GRANITE_STYLE_CLASS_SUGGESTED_ACTION: &[u8] = b"suggested-action\0";
pub const GRANITE_STYLE_CLASS_VIEW: &[u8] = b"view\0";
pub const GRANITE_STYLE_CLASS_WARNING: &[u8] = b"warning\0";
pub const GRANITE_TRANSITION_DURATION_CLOSE: c_int = 200;
pub const GRANITE_TRANSITION_DURATION_IN_PLACE: c_int = 100;
pub const GRANITE_TRANSITION_DURATION_OPEN: c_int = 250;
pub const GRANITE_TOOLTIP_SECONDARY_TEXT_MARKUP: &[u8] =
    b"<span weight=\"600\" size=\"smaller\" alpha=\"75%\">%s</span>\0";

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteAccelLabelClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for GraniteAccelLabelClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteAccelLabelClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteAccelLabelPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteAccelLabelPrivate = *mut _GraniteAccelLabelPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteDatePickerClass {
    pub parent_class: gtk::GtkEntryClass,
}

impl ::std::fmt::Debug for GraniteDatePickerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDatePickerClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteDatePickerPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteDatePickerPrivate = *mut _GraniteDatePickerPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteDialogClass {
    pub parent_class: gtk::GtkDialogClass,
}

impl ::std::fmt::Debug for GraniteDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDialogClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteDialogPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteDialogPrivate = *mut _GraniteDialogPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteHeaderLabelClass {
    pub parent_class: gtk::GtkWidgetClass,
}

impl ::std::fmt::Debug for GraniteHeaderLabelClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteHeaderLabelClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteHeaderLabelPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteHeaderLabelPrivate = *mut _GraniteHeaderLabelPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteHyperTextViewClass {
    pub parent_class: gtk::GtkTextViewClass,
}

impl ::std::fmt::Debug for GraniteHyperTextViewClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteHyperTextViewClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteHyperTextViewPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteHyperTextViewPrivate = *mut _GraniteHyperTextViewPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteMessageDialogClass {
    pub parent_class: GraniteDialogClass,
}

impl ::std::fmt::Debug for GraniteMessageDialogClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteMessageDialogClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteMessageDialogPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteMessageDialogPrivate = *mut _GraniteMessageDialogPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteModeSwitchClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for GraniteModeSwitchClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteModeSwitchClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteModeSwitchPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteModeSwitchPrivate = *mut _GraniteModeSwitchPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteOverlayBarClass {
    pub parent_class: gtk::GtkWidgetClass,
}

impl ::std::fmt::Debug for GraniteOverlayBarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteOverlayBarClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteOverlayBarPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteOverlayBarPrivate = *mut _GraniteOverlayBarPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GranitePlaceholderClass {
    pub parent_class: gtk::GtkWidgetClass,
}

impl ::std::fmt::Debug for GranitePlaceholderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GranitePlaceholderClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GranitePlaceholderPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GranitePlaceholderPrivate = *mut _GranitePlaceholderPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteServicesContractIface {
    pub parent_iface: gobject::GTypeInterface,
    pub get_display_name: Option<unsafe extern "C" fn(*mut GraniteServicesContract) -> *mut c_char>,
    pub get_description: Option<unsafe extern "C" fn(*mut GraniteServicesContract) -> *mut c_char>,
    pub get_icon: Option<unsafe extern "C" fn(*mut GraniteServicesContract) -> *mut gio::GIcon>,
    pub execute_with_file: Option<
        unsafe extern "C" fn(*mut GraniteServicesContract, *mut gio::GFile, *mut *mut glib::GError),
    >,
    pub execute_with_files: Option<
        unsafe extern "C" fn(
            *mut GraniteServicesContract,
            *mut *mut gio::GFile,
            c_int,
            *mut *mut glib::GError,
        ),
    >,
}

impl ::std::fmt::Debug for GraniteServicesContractIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesContractIface @ {self:p}"))
            .field("get_display_name", &self.get_display_name)
            .field("get_description", &self.get_description)
            .field("get_icon", &self.get_icon)
            .field("execute_with_file", &self.execute_with_file)
            .field("execute_with_files", &self.execute_with_files)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteServicesContractorProxyClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesContractorProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesContractorProxyClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesContractorProxyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteServicesContractorProxyPrivate = *mut _GraniteServicesContractorProxyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteServicesSettingsSerializableIface {
    pub parent_iface: gobject::GTypeInterface,
    pub settings_serialize:
        Option<unsafe extern "C" fn(*mut GraniteServicesSettingsSerializable) -> *mut c_char>,
    pub settings_deserialize:
        Option<unsafe extern "C" fn(*mut GraniteServicesSettingsSerializable, *const c_char)>,
}

impl ::std::fmt::Debug for GraniteServicesSettingsSerializableIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "GraniteServicesSettingsSerializableIface @ {self:p}"
        ))
        .field("settings_serialize", &self.settings_serialize)
        .field("settings_deserialize", &self.settings_deserialize)
        .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteServicesSystemClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteServicesSystemClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSystemClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteServicesSystemPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteServicesSystemPrivate = *mut _GraniteServicesSystemPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSettingsClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for GraniteSettingsClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsClass @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSettingsPageClass {
    pub parent_class: gtk::GtkBoxClass,
}

impl ::std::fmt::Debug for GraniteSettingsPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsPageClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteSettingsPagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteSettingsPagePrivate = *mut _GraniteSettingsPagePrivate;

#[repr(C)]
pub struct _GraniteSettingsPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteSettingsPrivate = *mut _GraniteSettingsPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSettingsSidebarClass {
    pub parent_class: gtk::GtkWidgetClass,
}

impl ::std::fmt::Debug for GraniteSettingsSidebarClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsSidebarClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteSettingsSidebarPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteSettingsSidebarPrivate = *mut _GraniteSettingsSidebarPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSimpleSettingsPageClass {
    pub parent_class: GraniteSettingsPageClass,
}

impl ::std::fmt::Debug for GraniteSimpleSettingsPageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSimpleSettingsPageClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteSimpleSettingsPagePrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteSimpleSettingsPagePrivate = *mut _GraniteSimpleSettingsPagePrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSwitchModelButtonClass {
    pub parent_class: gtk::GtkToggleButtonClass,
}

impl ::std::fmt::Debug for GraniteSwitchModelButtonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSwitchModelButtonClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteSwitchModelButtonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteSwitchModelButtonPrivate = *mut _GraniteSwitchModelButtonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteTimePickerClass {
    pub parent_class: gtk::GtkEntryClass,
}

impl ::std::fmt::Debug for GraniteTimePickerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteTimePickerClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteTimePickerPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteTimePickerPrivate = *mut _GraniteTimePickerPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteToastClass {
    pub parent_class: gtk::GtkWidgetClass,
}

impl ::std::fmt::Debug for GraniteToastClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteToastClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteToastPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteToastPrivate = *mut _GraniteToastPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteValidatedEntryClass {
    pub parent_class: gtk::GtkEntryClass,
}

impl ::std::fmt::Debug for GraniteValidatedEntryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteValidatedEntryClass @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct _GraniteValidatedEntryPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type GraniteValidatedEntryPrivate = *mut _GraniteValidatedEntryPrivate;

// Classes
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteAccelLabel {
    pub parent_instance: gtk::GtkBox,
    pub priv_: *mut GraniteAccelLabelPrivate,
}

impl ::std::fmt::Debug for GraniteAccelLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteAccelLabel @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteDatePicker {
    pub parent_instance: gtk::GtkEntry,
    pub priv_: *mut GraniteDatePickerPrivate,
}

impl ::std::fmt::Debug for GraniteDatePicker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDatePicker @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteDialog {
    pub parent_instance: gtk::GtkDialog,
    pub priv_: *mut GraniteDialogPrivate,
}

impl ::std::fmt::Debug for GraniteDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteDialog @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteHeaderLabel {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut GraniteHeaderLabelPrivate,
}

impl ::std::fmt::Debug for GraniteHeaderLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteHeaderLabel @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteHyperTextView {
    pub parent_instance: gtk::GtkTextView,
    pub priv_: *mut GraniteHyperTextViewPrivate,
}

impl ::std::fmt::Debug for GraniteHyperTextView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteHyperTextView @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteMessageDialog {
    pub parent_instance: GraniteDialog,
    pub priv_: *mut GraniteMessageDialogPrivate,
}

impl ::std::fmt::Debug for GraniteMessageDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteMessageDialog @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteModeSwitch {
    pub parent_instance: gtk::GtkBox,
    pub priv_: *mut GraniteModeSwitchPrivate,
}

impl ::std::fmt::Debug for GraniteModeSwitch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteModeSwitch @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteOverlayBar {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut GraniteOverlayBarPrivate,
}

impl ::std::fmt::Debug for GraniteOverlayBar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteOverlayBar @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GranitePlaceholder {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut GranitePlaceholderPrivate,
}

impl ::std::fmt::Debug for GranitePlaceholder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GranitePlaceholder @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteServicesContractorProxy {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesContractorProxyPrivate,
}

impl ::std::fmt::Debug for GraniteServicesContractorProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesContractorProxy @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteServicesSystem {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteServicesSystemPrivate,
}

impl ::std::fmt::Debug for GraniteServicesSystem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteServicesSystem @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSettings {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut GraniteSettingsPrivate,
}

impl ::std::fmt::Debug for GraniteSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettings @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSettingsPage {
    pub parent_instance: gtk::GtkBox,
    pub _icon_name: *mut c_char,
    pub _title: *mut c_char,
    pub priv_: *mut GraniteSettingsPagePrivate,
}

impl ::std::fmt::Debug for GraniteSettingsPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsPage @ {self:p}"))
            .field("_icon_name", &self._icon_name)
            .field("_title", &self._title)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSettingsSidebar {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut GraniteSettingsSidebarPrivate,
}

impl ::std::fmt::Debug for GraniteSettingsSidebar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSettingsSidebar @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSimpleSettingsPage {
    pub parent_instance: GraniteSettingsPage,
    pub priv_: *mut GraniteSimpleSettingsPagePrivate,
}

impl ::std::fmt::Debug for GraniteSimpleSettingsPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSimpleSettingsPage @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteSwitchModelButton {
    pub parent_instance: gtk::GtkToggleButton,
    pub priv_: *mut GraniteSwitchModelButtonPrivate,
}

impl ::std::fmt::Debug for GraniteSwitchModelButton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteSwitchModelButton @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteTimePicker {
    pub parent_instance: gtk::GtkEntry,
    pub priv_: *mut GraniteTimePickerPrivate,
}

impl ::std::fmt::Debug for GraniteTimePicker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteTimePicker @ {self:p}"))
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteToast {
    pub parent_instance: gtk::GtkWidget,
    pub priv_: *mut GraniteToastPrivate,
}

impl ::std::fmt::Debug for GraniteToast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteToast @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraniteValidatedEntry {
    pub parent_instance: gtk::GtkEntry,
    pub priv_: *mut GraniteValidatedEntryPrivate,
}

impl ::std::fmt::Debug for GraniteValidatedEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("GraniteValidatedEntry @ {self:p}"))
            .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct GraniteServicesContract {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GraniteServicesContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteServicesContract @ {self:p}")
    }
}

#[repr(C)]
pub struct GraniteServicesSettingsSerializable {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for GraniteServicesSettingsSerializable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "GraniteServicesSettingsSerializable @ {self:p}")
    }
}

#[link(name = "granite-7")]
extern "C" {

    //=========================================================================
    // GraniteServicesContractorError
    //=========================================================================
    pub fn granite_services_contractor_error_get_type() -> GType;

    //=========================================================================
    // GraniteSettingsColorScheme
    //=========================================================================
    pub fn granite_settings_color_scheme_get_type() -> GType;

    //=========================================================================
    // GraniteSettingsPageStatusType
    //=========================================================================
    pub fn granite_settings_page_status_type_get_type() -> GType;

    //=========================================================================
    // GraniteAccelLabel
    //=========================================================================
    pub fn granite_accel_label_get_type() -> GType;
    pub fn granite_accel_label_get_action_name(self_: *mut GraniteAccelLabel) -> *const c_char;
    pub fn granite_accel_label_set_action_name(self_: *mut GraniteAccelLabel, value: *const c_char);
    pub fn granite_accel_label_get_accel_string(self_: *mut GraniteAccelLabel) -> *const c_char;
    pub fn granite_accel_label_set_accel_string(
        self_: *mut GraniteAccelLabel,
        value: *const c_char,
    );
    pub fn granite_accel_label_get_label(self_: *mut GraniteAccelLabel) -> *const c_char;
    pub fn granite_accel_label_set_label(self_: *mut GraniteAccelLabel, value: *const c_char);
    pub fn granite_accel_label_new(
        label: *const c_char,
        accel_string: *const c_char,
    ) -> *mut GraniteAccelLabel;
    pub fn granite_accel_label_new_from_action_name(
        label: *const c_char,
        action_name: *const c_char,
    ) -> *mut GraniteAccelLabel;

    //=========================================================================
    // GraniteDatePicker
    //=========================================================================
    pub fn granite_date_picker_get_type() -> GType;
    pub fn granite_date_picker_get_format(self_: *mut GraniteDatePicker) -> *const c_char;
    pub fn granite_date_picker_get_date(self_: *mut GraniteDatePicker) -> *mut glib::GDateTime;
    pub fn granite_date_picker_set_date(self_: *mut GraniteDatePicker, value: *mut glib::GDateTime);
    pub fn granite_date_picker_new_with_format(format: *const c_char) -> *mut GraniteDatePicker;
    pub fn granite_date_picker_new() -> *mut GraniteDatePicker;

    //=========================================================================
    // GraniteDialog
    //=========================================================================
    pub fn granite_dialog_get_type() -> GType;
    pub fn granite_dialog_new() -> *mut GraniteDialog;

    //=========================================================================
    // GraniteHeaderLabel
    //=========================================================================
    pub fn granite_header_label_get_type() -> GType;
    pub fn granite_header_label_get_label(self_: *mut GraniteHeaderLabel) -> *const c_char;
    pub fn granite_header_label_set_label(self_: *mut GraniteHeaderLabel, value: *const c_char);
    #[cfg(any(feature = "v7_1", docsrs))]
    #[cfg_attr(docsrs, doc(cfg(feature = "v7_1")))]
    pub fn granite_header_label_get_secondary_text(self_: *mut GraniteHeaderLabel)
        -> *const c_char;
    #[cfg(any(feature = "v7_1", docsrs))]
    #[cfg_attr(docsrs, doc(cfg(feature = "v7_1")))]
    pub fn granite_header_label_set_secondary_text(
        self_: *mut GraniteHeaderLabel,
        value: *const c_char,
    );
    pub fn granite_header_label_new(label: *const c_char) -> *mut GraniteHeaderLabel;

    //=========================================================================
    // GraniteHyperTextView
    //=========================================================================
    pub fn granite_hyper_text_view_get_type() -> GType;
    pub fn granite_hyper_text_view_new() -> *mut GraniteHyperTextView;

    //=========================================================================
    // GraniteMessageDialog
    //=========================================================================
    pub fn granite_message_dialog_get_type() -> GType;
    pub fn granite_message_dialog_get_primary_text(
        self_: *mut GraniteMessageDialog,
    ) -> *const c_char;
    pub fn granite_message_dialog_set_primary_text(
        self_: *mut GraniteMessageDialog,
        value: *const c_char,
    );
    pub fn granite_message_dialog_get_secondary_text(
        self_: *mut GraniteMessageDialog,
    ) -> *const c_char;
    pub fn granite_message_dialog_set_secondary_text(
        self_: *mut GraniteMessageDialog,
        value: *const c_char,
    );
    pub fn granite_message_dialog_get_image_icon(
        self_: *mut GraniteMessageDialog,
    ) -> *mut gio::GIcon;
    pub fn granite_message_dialog_set_image_icon(
        self_: *mut GraniteMessageDialog,
        value: *mut gio::GIcon,
    );
    pub fn granite_message_dialog_get_badge_icon(
        self_: *mut GraniteMessageDialog,
    ) -> *mut gio::GIcon;
    pub fn granite_message_dialog_set_badge_icon(
        self_: *mut GraniteMessageDialog,
        value: *mut gio::GIcon,
    );
    pub fn granite_message_dialog_get_primary_label(
        self_: *mut GraniteMessageDialog,
    ) -> *mut gtk::GtkLabel;
    pub fn granite_message_dialog_get_secondary_label(
        self_: *mut GraniteMessageDialog,
    ) -> *mut gtk::GtkLabel;
    pub fn granite_message_dialog_get_custom_bin(
        self_: *mut GraniteMessageDialog,
    ) -> *mut gtk::GtkBox;
    pub fn granite_message_dialog_new(
        primary_text: *const c_char,
        secondary_text: *const c_char,
        image_icon: *mut gio::GIcon,
        buttons: gtk::GtkButtonsType,
    ) -> *mut GraniteMessageDialog;
    pub fn granite_message_dialog_new_with_image_from_icon_name(
        primary_text: *const c_char,
        secondary_text: *const c_char,
        image_icon_name: *const c_char,
        buttons: gtk::GtkButtonsType,
    ) -> *mut GraniteMessageDialog;
    pub fn granite_message_dialog_show_error_details(
        self_: *mut GraniteMessageDialog,
        error_message: *const c_char,
    );

    //=========================================================================
    // GraniteModeSwitch
    //=========================================================================
    pub fn granite_mode_switch_get_type() -> GType;
    pub fn granite_mode_switch_get_active(self_: *mut GraniteModeSwitch) -> gboolean;
    pub fn granite_mode_switch_set_active(self_: *mut GraniteModeSwitch, value: gboolean);
    pub fn granite_mode_switch_get_primary_icon_gicon(
        self_: *mut GraniteModeSwitch,
    ) -> *mut gio::GIcon;
    pub fn granite_mode_switch_set_primary_icon_gicon(
        self_: *mut GraniteModeSwitch,
        value: *mut gio::GIcon,
    );
    pub fn granite_mode_switch_get_primary_icon_name(
        self_: *mut GraniteModeSwitch,
    ) -> *const c_char;
    pub fn granite_mode_switch_set_primary_icon_name(
        self_: *mut GraniteModeSwitch,
        value: *const c_char,
    );
    pub fn granite_mode_switch_get_primary_icon_tooltip_text(
        self_: *mut GraniteModeSwitch,
    ) -> *const c_char;
    pub fn granite_mode_switch_set_primary_icon_tooltip_text(
        self_: *mut GraniteModeSwitch,
        value: *const c_char,
    );
    pub fn granite_mode_switch_get_secondary_icon_gicon(
        self_: *mut GraniteModeSwitch,
    ) -> *mut gio::GIcon;
    pub fn granite_mode_switch_set_secondary_icon_gicon(
        self_: *mut GraniteModeSwitch,
        value: *mut gio::GIcon,
    );
    pub fn granite_mode_switch_get_secondary_icon_name(
        self_: *mut GraniteModeSwitch,
    ) -> *const c_char;
    pub fn granite_mode_switch_set_secondary_icon_name(
        self_: *mut GraniteModeSwitch,
        value: *const c_char,
    );
    pub fn granite_mode_switch_get_secondary_icon_tooltip_text(
        self_: *mut GraniteModeSwitch,
    ) -> *const c_char;
    pub fn granite_mode_switch_set_secondary_icon_tooltip_text(
        self_: *mut GraniteModeSwitch,
        value: *const c_char,
    );
    pub fn granite_mode_switch_new(
        primary_icon_gicon: *mut gio::GIcon,
        secondary_icon_gicon: *mut gio::GIcon,
    ) -> *mut GraniteModeSwitch;
    pub fn granite_mode_switch_new_from_icon_name(
        primary_icon_name: *const c_char,
        secondary_icon_name: *const c_char,
    ) -> *mut GraniteModeSwitch;

    //=========================================================================
    // GraniteOverlayBar
    //=========================================================================
    pub fn granite_overlay_bar_get_type() -> GType;
    pub fn granite_overlay_bar_get_overlay(self_: *mut GraniteOverlayBar) -> *mut gtk::GtkOverlay;
    pub fn granite_overlay_bar_get_label(self_: *mut GraniteOverlayBar) -> *const c_char;
    pub fn granite_overlay_bar_set_label(self_: *mut GraniteOverlayBar, value: *const c_char);
    pub fn granite_overlay_bar_get_active(self_: *mut GraniteOverlayBar) -> gboolean;
    pub fn granite_overlay_bar_set_active(self_: *mut GraniteOverlayBar, value: gboolean);
    pub fn granite_overlay_bar_new(overlay: *mut gtk::GtkOverlay) -> *mut GraniteOverlayBar;

    //=========================================================================
    // GranitePlaceholder
    //=========================================================================
    pub fn granite_placeholder_get_type() -> GType;
    pub fn granite_placeholder_get_title(self_: *mut GranitePlaceholder) -> *const c_char;
    pub fn granite_placeholder_set_title(self_: *mut GranitePlaceholder, value: *const c_char);
    pub fn granite_placeholder_get_description(self_: *mut GranitePlaceholder) -> *const c_char;
    pub fn granite_placeholder_set_description(
        self_: *mut GranitePlaceholder,
        value: *const c_char,
    );
    pub fn granite_placeholder_get_icon(self_: *mut GranitePlaceholder) -> *mut gio::GIcon;
    pub fn granite_placeholder_set_icon(self_: *mut GranitePlaceholder, value: *mut gio::GIcon);
    pub fn granite_placeholder_new(title: *const c_char) -> *mut GranitePlaceholder;
    pub fn granite_placeholder_append_button(
        self_: *mut GranitePlaceholder,
        icon: *mut gio::GIcon,
        label: *const c_char,
        description: *const c_char,
    ) -> *mut gtk::GtkButton;

    //=========================================================================
    // GraniteServicesContractorProxy
    //=========================================================================
    pub fn granite_services_contractor_proxy_get_type() -> GType;
    pub fn granite_services_contractor_proxy_get_instance(
        error: *mut *mut glib::GError,
    ) -> *mut GraniteServicesContractorProxy;

    //=========================================================================
    // GraniteServicesSystem
    //=========================================================================
    pub fn granite_services_system_get_type() -> GType;
    pub fn granite_services_system_history_is_enabled() -> gboolean;
    pub fn granite_services_system_new() -> *mut GraniteServicesSystem;

    //=========================================================================
    // GraniteSettings
    //=========================================================================
    pub fn granite_settings_get_type() -> GType;
    pub fn granite_settings_get_prefers_color_scheme(
        self_: *mut GraniteSettings,
    ) -> GraniteSettingsColorScheme;
    pub fn granite_settings_get_default() -> *mut GraniteSettings;

    //=========================================================================
    // GraniteSettingsPage
    //=========================================================================
    pub fn granite_settings_page_get_type() -> GType;
    pub fn granite_settings_page_get_status_type(
        self_: *mut GraniteSettingsPage,
    ) -> GraniteSettingsPageStatusType;
    pub fn granite_settings_page_set_status_type(
        self_: *mut GraniteSettingsPage,
        value: GraniteSettingsPageStatusType,
    );
    pub fn granite_settings_page_get_display_widget(
        self_: *mut GraniteSettingsPage,
    ) -> *mut gtk::GtkWidget;
    pub fn granite_settings_page_get_header(self_: *mut GraniteSettingsPage) -> *const c_char;
    pub fn granite_settings_page_get_status(self_: *mut GraniteSettingsPage) -> *const c_char;
    pub fn granite_settings_page_set_status(self_: *mut GraniteSettingsPage, value: *const c_char);
    pub fn granite_settings_page_get_icon_name(self_: *mut GraniteSettingsPage) -> *const c_char;
    pub fn granite_settings_page_set_icon_name(
        self_: *mut GraniteSettingsPage,
        value: *const c_char,
    );
    pub fn granite_settings_page_get_title(self_: *mut GraniteSettingsPage) -> *const c_char;
    pub fn granite_settings_page_set_title(self_: *mut GraniteSettingsPage, value: *const c_char);
    pub fn granite_settings_page_get_child(self_: *mut GraniteSettingsPage) -> *mut gtk::GtkWidget;
    pub fn granite_settings_page_set_child(
        self_: *mut GraniteSettingsPage,
        value: *mut gtk::GtkWidget,
    );

    //=========================================================================
    // GraniteSettingsSidebar
    //=========================================================================
    pub fn granite_settings_sidebar_get_type() -> GType;
    pub fn granite_settings_sidebar_get_stack(
        self_: *mut GraniteSettingsSidebar,
    ) -> *mut gtk::GtkStack;
    pub fn granite_settings_sidebar_get_visible_child_name(
        self_: *mut GraniteSettingsSidebar,
    ) -> *const c_char;
    pub fn granite_settings_sidebar_set_visible_child_name(
        self_: *mut GraniteSettingsSidebar,
        value: *const c_char,
    );
    pub fn granite_settings_sidebar_new(stack: *mut gtk::GtkStack) -> *mut GraniteSettingsSidebar;

    //=========================================================================
    // GraniteSimpleSettingsPage
    //=========================================================================
    pub fn granite_simple_settings_page_get_type() -> GType;
    pub fn granite_simple_settings_page_get_action_area(
        self_: *mut GraniteSimpleSettingsPage,
    ) -> *mut gtk::GtkBox;
    pub fn granite_simple_settings_page_get_content_area(
        self_: *mut GraniteSimpleSettingsPage,
    ) -> *mut gtk::GtkGrid;
    pub fn granite_simple_settings_page_get_status_switch(
        self_: *mut GraniteSimpleSettingsPage,
    ) -> *mut gtk::GtkSwitch;
    pub fn granite_simple_settings_page_get_activatable(
        self_: *mut GraniteSimpleSettingsPage,
    ) -> gboolean;
    pub fn granite_simple_settings_page_get_description(
        self_: *mut GraniteSimpleSettingsPage,
    ) -> *const c_char;
    pub fn granite_simple_settings_page_set_description(
        self_: *mut GraniteSimpleSettingsPage,
        value: *const c_char,
    );

    //=========================================================================
    // GraniteSwitchModelButton
    //=========================================================================
    pub fn granite_switch_model_button_get_type() -> GType;
    pub fn granite_switch_model_button_get_text(
        self_: *mut GraniteSwitchModelButton,
    ) -> *const c_char;
    pub fn granite_switch_model_button_set_text(
        self_: *mut GraniteSwitchModelButton,
        value: *const c_char,
    );
    pub fn granite_switch_model_button_get_description(
        self_: *mut GraniteSwitchModelButton,
    ) -> *const c_char;
    pub fn granite_switch_model_button_set_description(
        self_: *mut GraniteSwitchModelButton,
        value: *const c_char,
    );
    pub fn granite_switch_model_button_new(text: *const c_char) -> *mut GraniteSwitchModelButton;

    //=========================================================================
    // GraniteTimePicker
    //=========================================================================
    pub fn granite_time_picker_get_type() -> GType;
    pub fn granite_time_picker_get_format_12(self_: *mut GraniteTimePicker) -> *const c_char;
    pub fn granite_time_picker_get_format_24(self_: *mut GraniteTimePicker) -> *const c_char;
    pub fn granite_time_picker_get_time(self_: *mut GraniteTimePicker) -> *mut glib::GDateTime;
    pub fn granite_time_picker_set_time(self_: *mut GraniteTimePicker, value: *mut glib::GDateTime);
    pub fn granite_time_picker_new_with_format(
        format_12: *const c_char,
        format_24: *const c_char,
    ) -> *mut GraniteTimePicker;
    pub fn granite_time_picker_new() -> *mut GraniteTimePicker;

    //=========================================================================
    // GraniteToast
    //=========================================================================
    pub fn granite_toast_get_type() -> GType;
    pub fn granite_toast_get_title(self_: *mut GraniteToast) -> *const c_char;
    pub fn granite_toast_set_title(self_: *mut GraniteToast, value: *const c_char);
    pub fn granite_toast_new(title: *const c_char) -> *mut GraniteToast;
    pub fn granite_toast_set_default_action(self_: *mut GraniteToast, label: *const c_char);
    pub fn granite_toast_send_notification(self_: *mut GraniteToast);

    //=========================================================================
    // GraniteValidatedEntry
    //=========================================================================
    pub fn granite_validated_entry_get_type() -> GType;
    pub fn granite_validated_entry_get_is_valid(self_: *mut GraniteValidatedEntry) -> gboolean;
    pub fn granite_validated_entry_set_is_valid(self_: *mut GraniteValidatedEntry, value: gboolean);
    pub fn granite_validated_entry_get_min_length(self_: *mut GraniteValidatedEntry) -> c_int;
    pub fn granite_validated_entry_set_min_length(self_: *mut GraniteValidatedEntry, value: c_int);
    pub fn granite_validated_entry_get_regex(
        self_: *mut GraniteValidatedEntry,
    ) -> *mut glib::GRegex;
    pub fn granite_validated_entry_set_regex(
        self_: *mut GraniteValidatedEntry,
        value: *mut glib::GRegex,
    );
    pub fn granite_validated_entry_new_from_regex(
        regex_arg: *mut glib::GRegex,
    ) -> *mut GraniteValidatedEntry;
    pub fn granite_validated_entry_new() -> *mut GraniteValidatedEntry;

    //=========================================================================
    // GraniteServicesContract
    //=========================================================================
    pub fn granite_services_contract_get_type() -> GType;
    pub fn granite_services_contract_get_display_name(
        self_: *mut GraniteServicesContract,
    ) -> *mut c_char;
    pub fn granite_services_contract_get_description(
        self_: *mut GraniteServicesContract,
    ) -> *mut c_char;
    pub fn granite_services_contract_get_icon(
        self_: *mut GraniteServicesContract,
    ) -> *mut gio::GIcon;
    pub fn granite_services_contract_execute_with_file(
        self_: *mut GraniteServicesContract,
        file: *mut gio::GFile,
        error: *mut *mut glib::GError,
    );
    pub fn granite_services_contract_execute_with_files(
        self_: *mut GraniteServicesContract,
        files: *mut *mut gio::GFile,
        files_length1: c_int,
        error: *mut *mut glib::GError,
    );

    //=========================================================================
    // GraniteServicesSettingsSerializable
    //=========================================================================
    pub fn granite_services_settings_serializable_get_type() -> GType;
    pub fn granite_services_settings_serializable_settings_serialize(
        self_: *mut GraniteServicesSettingsSerializable,
    ) -> *mut c_char;
    pub fn granite_services_settings_serializable_settings_deserialize(
        self_: *mut GraniteServicesSettingsSerializable,
        s: *const c_char,
    );

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn granite_date_time_get_default_time_format(
        is_12h: gboolean,
        with_second: gboolean,
    ) -> *mut c_char;
    pub fn granite_date_time_get_relative_datetime(date_time: *mut glib::GDateTime) -> *mut c_char;
    pub fn granite_date_time_is_same_day(
        day1: *mut glib::GDateTime,
        day2: *mut glib::GDateTime,
    ) -> gboolean;
    pub fn granite_date_time_get_default_date_format(
        with_weekday: gboolean,
        with_day: gboolean,
        with_year: gboolean,
    ) -> *mut c_char;
    pub fn granite_date_time_seconds_to_time(seconds: c_int) -> *mut c_char;
    pub fn granite_services_application_set_badge(
        count: i64,
        _callback_: gio::GAsyncReadyCallback,
        _callback__target: *mut c_void,
    );
    pub fn granite_services_application_set_badge_finish(
        _res_: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn granite_services_application_set_badge_visible(
        visible: gboolean,
        _callback_: gio::GAsyncReadyCallback,
        _callback__target: *mut c_void,
    );
    pub fn granite_services_application_set_badge_visible_finish(
        _res_: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn granite_services_application_set_progress(
        progress: c_double,
        _callback_: gio::GAsyncReadyCallback,
        _callback__target: *mut c_void,
    );
    pub fn granite_services_application_set_progress_finish(
        _res_: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn granite_services_application_set_progress_visible(
        visible: gboolean,
        _callback_: gio::GAsyncReadyCallback,
        _callback__target: *mut c_void,
    );
    pub fn granite_services_application_set_progress_visible_finish(
        _res_: *mut gio::GAsyncResult,
        error: *mut *mut glib::GError,
    ) -> gboolean;
    pub fn granite_widgets_utils_set_color_primary(
        window: *mut gtk::GtkWidget,
        color: *mut gdk::GdkRGBA,
        priority: c_int,
    ) -> *mut gtk::GtkCssProvider;
    #[cfg(any(feature = "v7_2", docsrs))]
    #[cfg_attr(docsrs, doc(cfg(feature = "v7_2")))]
    pub fn granite_init();
    pub fn granite_accel_to_string(accel: *const c_char) -> *mut c_char;
    pub fn granite_markup_accel_tooltip(
        accels: *mut *mut c_char,
        accels_length1: c_int,
        description: *const c_char,
    ) -> *mut c_char;
    pub fn granite_contrasting_foreground_color(
        bg_color: *mut gdk::GdkRGBA,
        result: *mut gdk::GdkRGBA,
    );

}
